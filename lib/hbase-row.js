// Generated by CoffeeScript 1.4.0
var Row, Table, utils;

utils = require("./hbase-utils");

Table = require("./hbase-table");

Row = function(client, table, key) {
  this.client = client;
  this.table = (typeof table === "string" ? table : table.name);
  return this.key = key;
};

Row.prototype["delete"] = function() {
  var args, columns, self, url;
  self = this;
  args = Array.prototype.slice.call(arguments_);
  columns = void 0;
  if (typeof args[0] === "string" || (typeof args[0] === "object" && args[0] instanceof Array)) {
    columns = args.shift();
  }
  url = utils.url.encode(this.table, this.key, columns);
  return this.client.connection["delete"](url, (function(error, success) {
    return args[0].apply(self, [error, (error ? null : true)]);
  }), true);
};

Row.prototype.exists = function(column, callback) {
  var args, self, url;
  self = this;
  args = Array.prototype.slice.call(arguments_);
  column = (typeof args[0] === "string" ? args.shift() : null);
  url = utils.url.encode(this.table, this.key, column);
  return this.client.connection.get(url, function(error, exists) {
    if (error && (error.code === 404 || error.code === 503)) {
      error = null;
      exists = false;
    }
    return args[0].apply(self, [error, (error ? null : (exists === false ? false : true))]);
  });
};

Row.prototype.get = function(column, callback) {
  var args, columns, end, isGlob, key, options, params, self, start, url;
  self = this;
  args = Array.prototype.slice.call(arguments_);
  key = "/" + this.table + "/" + this.key;
  isGlob = this.key.substr(-1, 1) === "*";
  options = {};
  columns = null;
  start = null;
  end = null;
  params = {};
  if (typeof args[0] === "string" || (typeof args[0] === "object" && args[0] instanceof Array)) {
    columns = args.shift();
  }
  if (typeof args[0] === "object") {
    options = args.shift();
  }
  if (options.start) {
    start = options.start;
  }
  if (options.end) {
    end = options.end;
  }
  if (options.v) {
    params.v = options.v;
  }
  url = utils.url.encode(this.table, this.key, columns, start, end, params);
  return this.client.connection.get(url, function(error, data) {
    var cells;
    if (error) {
      return args[0].apply(self, [error, null]);
    }
    cells = [];
    data.Row.forEach(function(row) {
      key = utils.base64.decode(row.key);
      return row.Cell.forEach(function(cell) {
        data = {};
        if (isGlob) {
          data.key = key;
        }
        data.column = utils.base64.decode(cell.column);
        data.timestamp = cell.timestamp;
        data.$ = utils.base64.decode(cell.$);
        return cells.push(data);
      });
    });
    return args[0].apply(self, [null, cells]);
  });
};

Row.prototype.put = function(columns, values, callback) {
  var args, body, bodyCell, bodyRow, cell, cells, cellsKeys, data, k, k1, self, timestamps, url;
  self = this;
  args = Array.prototype.slice.call(arguments_);
  url = void 0;
  body = void 0;
  bodyRow = void 0;
  if (args.length > 2) {
    columns = args.shift();
    values = args.shift();
    timestamps = void 0;
    if (typeof args[0] !== "function") {
      timestamps = args.shift();
    }
    callback = args.shift();
    if (typeof columns === "string") {
      columns = [columns];
      values = [values];
    } else {
      if (columns.length !== values.length) {
        throw new Error("Columns count must match values count");
      }
    }
    body = {
      Row: []
    };
    bodyRow = {
      key: utils.base64.encode(self.key),
      Cell: []
    };
    columns.forEach(function(column, i) {
      var bodyCell;
      bodyCell = {};
      if (timestamps) {
        bodyCell.timestamp = timestamps[i];
      }
      bodyCell.column = utils.base64.encode(column);
      bodyCell.$ = utils.base64.encode(values[i]);
      return bodyRow.Cell.push(bodyCell);
    });
    body.Row.push(bodyRow);
    url = utils.url.encode(this.table, this.key || "___false-row-key___", columns);
  } else {
    data = args.shift();
    callback = args.shift();
    body = {
      Row: []
    };
    cellsKeys = {};
    data.forEach(function(d) {
      var key;
      key = d.key || self.key;
      if (!(key in cellsKeys)) {
        cellsKeys[key] = [];
      }
      return cellsKeys[key].push(d);
    });
    for (k in cellsKeys) {
      cells = cellsKeys[k];
      bodyRow = {
        key: utils.base64.encode(k),
        Cell: []
      };
      for (k1 in cells) {
        cell = cells[k1];
        bodyCell = {};
        if (cell.timestamp) {
          bodyCell.timestamp = "" + cell.timestamp;
        }
        bodyCell.column = utils.base64.encode(cell.column);
        bodyCell.$ = utils.base64.encode(cell.$);
        bodyRow.Cell.push(bodyCell);
      }
      body.Row.push(bodyRow);
    }
    url = utils.url.encode(this.table, this.key || "___false-row-key___");
  }
  return this.client.connection.put(url, body, function(error, data) {
    if (!callback) {
      return;
    }
    return callback.apply(self, [error, (error ? null : true)]);
  });
};

module.exports = Row;
