// Generated by CoffeeScript 1.8.0
var crypto, utils;

crypto = require('crypto');

utils = {
  base64: {
    encode: function(string) {
      return (new Buffer(string, 'utf8')).toString('base64');
    },
    decode: function(string) {
      return (new Buffer(string, 'base64')).toString('utf8');
    }
  },
  url: {

    /*
    Arguments:
    *   `table`
    *   `key`
    *   `columns`
    *   `start`
    *   `end`
    *   `params`
     */
    encode: function(args) {
      var columnPath, cs, k, newpath, ps, v, _ref, _ref1;
      if (!args.table) {
        throw new Error('Missing parameters "table"');
      }
      newpath = '/';
      newpath += encodeURIComponent(args.table);
      if (args.key) {
        newpath += '/';
        newpath += encodeURIComponent(args.key);
      }
      if (args.columns) {
        columnPath = void 0;
        if (Array.isArray(args.columns)) {
          columnPath = args.columns.map(function(column) {
            if (Array.isArray(column)) {
              return column.map(function(c) {
                return encodeURIComponent(c);
              }).join(':');
            } else {
              return encodeURIComponent(column);
            }
          }).join(',');
        } else if (typeof args.columns === 'object') {
          cs = [];
          _ref = args.columns;
          for (k in _ref) {
            v = _ref[k];
            cs.push("" + (encodeURIComponent(k)) + ":" + (encodeURIComponent(v)));
          }
          columnPath = cs.join(',');
        } else {
          columnPath = args.columns ? encodeURIComponent(args.columns) : '';
        }
        if (columnPath) {
          newpath += "/";
        }
        if (columnPath) {
          newpath += "" + columnPath;
        }
      }
      if (args.end) {
        newpath += '/';
        if (args.start) {
          newpath += encodeURIComponent(args.start);
          newpath += ',';
        }
        newpath += encodeURIComponent(args.end);
      }
      if (args.params) {
        newpath += '?';
        ps = [];
        _ref1 = args.params;
        for (k in _ref1) {
          v = _ref1[k];
          ps.push("" + (encodeURIComponent(k)) + "=" + (encodeURIComponent(v)));
        }
        newpath += ps.join(',');
      }
      return newpath;
    }
  }
};

module.exports = utils;
